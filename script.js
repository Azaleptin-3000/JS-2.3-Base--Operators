// Задание 1. Определения операторов и операндов

let x = 5 + 10 * 2; // Операнды: 5, 10, 2; Операторы: =, +, *
let isValid = (x > 10) && (x < 30); // Операнды: x, 10, 30; Операторы: =, >, <, &&
x++; // Операнды: x; Оператор: ++
delete obj.prop; // Операнды: obj, prop; Оператор: delete


// Задание 2. Арифметические операторы

function calculator() {
        const num1 = parseFloat(prompt("Введите первое число:"));
        const num2 = parseFloat(prompt("Введите второе число:"));
    
        // Сложение
        const addition = num1 + num2;
        console.log(Сложение: ${num1} + ${num2} = ${addition});
    
        // Разность
        const subtraction = num1 - num2;
        console.log(Разность: ${num1} - ${num2} = ${subtraction});
    
        // Произведение
        const multiplication = num1 * num2;
        console.log(Произведение: ${num1} * ${num2} = ${multiplication});
    
        // Деление
        if (num2 !== 0) {
            const division = num1 / num2;
            console.log(Деление: ${num1} / ${num2} = ${division});
        } else {
            console.log("Ошибка: Деление на ноль!");
        }
    
        // Остаток от деления
        if (num2 !== 0) {
            const remainder = num1 % num2;
            console.log(Остаток от деления: ${num1} % ${num2} = ${remainder});
        } else {
            console.log("Ошибка: Деление на ноль!");
        }
    
        // Возведение в степень
        const exponentiation = Math.pow(num1, num2);
        console.log(Возведение в степень: ${num1} ** ${num2} = ${exponentiation});
    }
    
    // Запуск калькулятора
    calculator();


// Задание 3. Бинарные и унарные операторы

let a = 10; //  Здесь просто присваивается значение 10 переменной "a". Операторов нет.

let b = -a; // - Здесь используется унарный оператор - (унарный минус), который меняет знак числа "a". 
                // В данном случае b будет равно -10, так как a равно 10. Унарный оператор.

a++; //  Это оператор инкремента (постфиксный). Он увеличивает значение переменной a на 1.
                // После выполнения этой строки a станет равным 11. Оператор инкремента ++ — это унарный оператор.

let c = a + b; // - Здесь используется бинарный оператор +, который выполняет сложение двух переменных: a и b.
        // На этом этапе a равно 11, а b равно -10, поэтому c будет равно 1 (11 + (-10)). Бинарный оператор.


// Задание 4. Операторы проверки отношений

let x = 15;
let y = 20;

if (x > y) {
    console.log(${x} больше ${y});
} else if (x < y) {
    console.log(${x} меньше ${y});
} else {
    console.log(${x} равно ${y});
}

// Задание 5. Проверка на равенство и неравенство

5 == '5'; // Оператор == (нестрогое равенство) выполняет приведение типов перед сравнением.
        // В этом случае строка '5' будет преобразована в число 5, и затем произойдет сравнение: 
        // 5 == 5, что дает true.

5 === '5'; // Оператор === (строгое равенство) не выполняет приведение типов. 
        // Он сравнивает как значение, так и тип данных. В данном случае типы различны: 
        // 5 — это число, а '5' — строка. Поскольку типы не совпадают, результат будет false.

null == undefined; // При нестрогом сравнении null и undefined считаются равными. 
        // Это особое правило в JavaScript, которое определяет, что оба значения 
        // представляют "пустоту" или "отсутствие значения", поэтому результат будет true.

null === undefined; // При строгом сравнении === типы данных также должны совпадать. 
        // null и undefined имеют разные типы: null является объектом, 
        // а undefined — это специальный тип, который обозначает отсутствие значения. 
        // Поскольку их типы различны, результат будет false.


// Задание 6. Оператор in

let user = {
        name: 'John',
        age: 30
        };
console.log('name' in user); //  Результат: true.
                        // Объяснение: в объекте user действительно существует свойство name, 
                        // поэтому оператор in возвращает true.

console.log('email' in user); // Результат: false.
                        // Объяснение: в объекте user нет свойства email, 
                        // поэтому оператор in возвращает false.


// Задание 7. Оператор присваивания и комбинирование с другими операторами

let a = 10;
a += 5;  // Преобразовано
a *= 2;  // Преобразовано
a -= 3;  // Преобразовано
// Эти операторы делают то же самое, что и исходные выражения, но записаны более компактно.


// Задание 8. Логические операторы

let isAdmin = true; // Пользователь является администратором
let isLoggedIn = false; // Пользователь не вошел в систему

let canViewPage = isAdmin && isLoggedIn; // Проверка: является ли пользователь администратором 
// И вошел ли он в систему?
// Результат: false, потому что хотя isAdmin = true, isLoggedIn = false. 
// Оператор && возвращает true только если оба условия истинны.
// canViewPage будет false (пользователь не может просматривать страницу).

let hasPermission = isAdmin || isLoggedIn; // Проверка: является ли пользователь администратором 
// ИЛИ вошел ли он в систему?
// Результат: true, потому что isAdmin = true. 
// Оператор || возвращает true, если хотя бы одно из условий истинно.
// hasPermission будет true (пользователь имеет разрешение).

let isGuest = !isLoggedIn; // Проверка: является ли пользователь гостем (не вошел в систему)?
// Результат: true, потому что isLoggedIn = false. 
// Оператор ! инвертирует значение, превращая false в true.
// isGuest будет true (пользователь является гостем).


// Задание 9. Тернарный оператор

let isLoggedIn = true; // Пользователь войдёт в систему
let message = isLoggedIn ? "Добро пожаловать";

let isLoggedIn = false; // Пользователь не войдёт в систему
let message = isLoggedIn ? "Вход запрещен";

console.log(message);


// Задание 10. Оператор typeof и оператор delete

// Определение типов данных
console.log(typeof 123); // 'number'
console.log(typeof 'Hello'); // 'string'
console.log(typeof undefined); // 'undefined'

// Объект car
let car = {
    make: 'Toyota',
    model: 'Corolla'
};

// Удаление свойства model
delete car.model; // Удаляем свойство

// Проверка объекта
console.log(car); // { make: 'Toyota' }


// Задание 11. Практика с несколькими операторами

let num1 = 10;
let num2 = 20;

// Арифметические операции
let sum = num1 + num2; // Сложение
let difference = num1 - num2; // Вычитание
let product = num1 * num2; // Умножение
let quotient = num2 / num1; // Деление

// Сравнение
let isGreater = num1 > num2; // Сравнение "больше"
let isEqual = num1 === num2; // Сравнение "равно"

// Логические операторы
let isBothPositive = (num1 > 0) && (num2 > 0); // Проверка, что оба числа положительные
let isAnyNegative = (num1 < 0) || (num2 < 0); // Проверка, что хотя бы одно число отрицательное

// Использование тернарного оператора для вывода результата
let comparisonResult = isGreater ? ${num1} больше ${num2} : ${num1} не больше ${num2};
let positivityResult = isBothPositive ? "Оба числа положительные." : "Не все числа положительные.";

console.log(Сумма: ${sum});
console.log(Разность: ${difference});
console.log(Произведение: ${product});
console.log(Частное: ${quotient});
console.log(comparisonResult);
console.log(positivityResult);
